import numpy as np


def case33_basecase():

    # define the network data as a dictionary named ppc
    ppc={}

    ppc["basemva"]=1
# %  0---Load bus, 1---Slack bus,  2---Generator bus
# %        IEEE 33-node feeder
# %        Bus Bus  Voltage Angle   ---Load----        ------Generator-----    Injected
# %        No  code Mag.    Degree   MW       Mvar      MW  Mvar     Qmin Qmax       Mvar
    ppc["bus"] = np.array([
        [1,   1,    1.060,   0.0,     0.010,   0.000,       0.000,   0.000,   0,   0,       0],
        [2,   0,    1.043,   0.0,     0.100,   0.006,       0.000,   0.000,   0,   0,       0],
        [3,   0,    1.000,   0.0,     0.090,   0.040,       0.000,   0.000,   0,   0,       0],
        [4,   0,    1.060,   0.0,     0.120,   0.080,       0.000,   0.000,   0,   0,       0],
        [5,   0,    1.010,   0.0,     0.060,   0.030,       0.000,   0.000,   0,   0,       0],
        [6,   0,    1.0,     0.0,     0.060,   0.020,       0.000,   0.000,   0,   0,       0],
        [7,   0,    1.0,     0.0,     0.200,   0.100,       0.000,   0.000,   0,   0,       0],
        [8,   0,    1.03,    0.0,     0.200,   0.100,       0.000,   0.000,   0,   0,       0],
        [9,   0,    1.0,     0.0,     0.060,   0.020,       0.000,   0.000,   0,   0,       0],
        [10,   0,   1.0,     0.0,     0.060,   0.020,       0.000,   0.000,   0,   0,       0],
        [11,   0,   1.0,     0.0,     0.045,   0.030,       0.000,   0.000,   0,   0,       0],
        [12,   0,   1.0,     0.0,     0.060,   0.035,       0.000,   0.000,   0,   0,       0],
        [13,   0,   1.0,     0.0,     0.060,   0.035,       0.000,   0.000,   0,   0,       0],
        [14,   0,    1,      0,       0.120,   0.080,       0.000,   0.000,   0,   0,       0],
        [15,   0,    1,      0,       0.060,   0.010,       0.000,   0.000,   0,   0,       0],
        [16,   0,   1,      0,       0.060,   0.020,       0.000,   0.000,   0,   0,       0],
        [17,   0,    1,       0,       0.060,   0.020,      0.000,   0.000,   0,   0,       0],
        [18,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [19,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [20,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [21,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [22,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [23,   0,    1,       0,       0.090,   0.050,      0.000,   0.000,   0,   0,       0],
        [24,   0,    1,       0,       0.420,   0.200,      0.000,   0.000,   0,   0,       0],  # active power large
        [25,   0,    1,       0,       0.420,   0.200,      0.000,   0.000,   0,   0,       0],  # active power large
        [26,   0,    1,       0,       0.060,   0.025,      0.000,   0.000,   0,   0,       0],
        [27,   0,    1,       0,       0.060,   0.025,      0.000,   0.000,   0,   0,       0],
        [28,   0,    1,       0,       0.060,   0.020,      0.000,   0.000,   0,   0,       0],
        [29,   0,    1,       0,       0.120,   0.070,      0.000,   0.000,   0,   0,       0],
        [30,   0,    1,       0,       0.200,   0.600,      0.000,   0.000,   0,   0,       0],  # reactive power large
        [31,   0,    1,       0,       0.150,   0.070,      0.000,   0.000,   0,   0,       0],
        [32,   0,    1,       0,       0.210,   0.100,      0.000,   0.000,   0,   0,       0],
        [33,   0,    1,       0,       0.060,   0.040,      1.000,   0.000,   0,   0,       0]
        ])

#         No  from-bus  to-bus  R  X  Pmax  Qmax
    ppc["line"] = np.array([
          [1,   1,   2,   0.000574,   0.000293,       5,           5],
          [2,   2,   3,   0.003070,   0.001564,       5,           5],
          [3,   3,   4,   0.002279,   0.001209,       5,           5],
          [4,   4,   5,   0.002373,   0.001209,       5,           5],
          [5,   5,   6,   0.005100,   0.004402,       5,           5],
          [6,   6,   7,   0.001166,   0.003853,       5,           5],
          [7,   7,   8,   0.004430,   0.001464,       5,           5],
          [8,   8,   9,   0.006413,   0.004608,       5,           5],
          [9,   9,   10,  0.006501,   0.004608,       5,           5],
          [10,  10,  11,  0.001224,   0.000405,       5,           5],
          [11,  11,  12,  0.002331,   0.000771,       5,           5],
          [12,  12,  13,  0.009141,   0.007192,       5,           5],
          [13,  13,  14,  0.003372,   0.004439,       5,           5],
          [14,  14,  15,  0.003680,   0.003275,       5,           5],
          [15,  15,  16,  0.004647,   0.003275,       5,           5],
          [16,  16,  17,  0.008026,   0.010716,       5,           5],
          [17,  17,  18,  0.004558,   0.003574,       5,           5],
          [18,  2,   19,   0.001021,   0.000974,      5,           5],
          [19,  19,  20,  0.009366,   0.008440,       5,           5],
          [20,  20,  21,  0.002550,   0.002979,       5,           5],
          [21,  21,  22,  0.004414,   0.005836,       5,           5],
          [22,  3,   23,   0.002809,   0.001920,      5,           5],
          [23,  23,  24,  0.005592,   0.004415,       5,           5],
          [24,  24,  25,  0.005579,   0.004366,       5,           5],
          [25,  6,   26,   0.001264,   0.000644,      5,           5],
          [26,  26,  27,  0.001770,   0.000901,       5,           5],
          [27,  27,  28,  0.006594,   0.005814,       5,           5],
          [28,  28,  29,  0.005007,   0.004362,       5,           5],
          [29,  29,  30,  0.003160,   0.001610,       5,           5],
          [30,  30,  31,  0.006067,   0.005996,       5,           5],
          [31,  31,  32,  0.001933,   0.002253,       5,           5],
          [32,  32,  33,  0.002123,   0.003301,       5,           5]
        ])
    #  gen index, gen bus, Pmin, Pmax, Qmin, Qmax
    ppc["gen"] = np.array([
        [1, 1, 0, 100, -100, 100]
    ])

    ppc['tieline'] = []

    # call data pre-processing functions
    ppc = get_iterator(ppc)
    ppc = get_bus_line_gen(ppc)
    ppc = get_total_load(ppc)

    return ppc




def case33_tieline():

    # define the network data as a dictionary named ppc
    ppc={}

    ppc["basemva"]=1
# %  0---Load bus, 1---Slack bus,  2---Generator bus
# %        IEEE 33-node feeder
# %        Bus Bus  Voltage Angle   ---Load----        ------Generator-----   Injected
# %        No  code Mag.    Degree   MW       Mvar          MW      Mvar     Qmin Qmax     Mvar
    ppc["bus"] = np.array([
        [1,   1,    1.060,   0.0,     0.010,   0.000,       0.000,   0.000,   0,   0,       0],
        [2,   0,    1.043,   0.0,     0.100,   0.006,       0.000,   0.000,   0,   0,       0],
        [3,   0,    1.000,   0.0,     0.090,   0.040,       0.000,   0.000,   0,   0,       0],
        [4,   0,    1.060,   0.0,     0.120,   0.080,       0.000,   0.000,   0,   0,       0],
        [5,   0,    1.010,   0.0,     0.060,   0.030,       0.000,   0.000,   0,   0,       0],
        [6,   0,    1.0,     0.0,     0.060,   0.020,       0.000,   0.000,   0,   0,       0],
        [7,   0,    1.0,     0.0,     0.200,   0.100,       0.000,   0.000,   0,   0,       0],
        [8,   0,    1.03,    0.0,     0.200,   0.100,       0.000,   0.000,   0,   0,       0],
        [9,   0,    1.0,     0.0,     0.060,   0.020,       0.000,   0.000,   0,   0,       0],
        [10,   0,   1.0,     0.0,     0.060,   0.020,       0.000,   0.000,   0,   0,       0],
        [11,   0,   1.0,     0.0,     0.045,   0.030,       0.000,   0.000,   0,   0,       0],
        [12,   0,   1.0,     0.0,     0.060,   0.035,       0.000,   0.000,   0,   0,       0],
        [13,   0,   1.0,     0.0,     0.060,   0.035,       0.000,   0.000,   0,   0,       0],
        [14,   0,    1,      0,       0.120,   0.080,       0.000,   0.000,   0,   0,       0],
        [15,   0,    1,      0,       0.060,   0.010,       0.000,   0.000,   0,   0,       0],
        [16,   0,    1,      0,       0.060,   0.020,       0.000,   0.000,   0,   0,       0],
        [17,   0,    1,       0,       0.060,   0.020,      0.000,   0.000,   0,   0,       0],
        [18,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [19,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [20,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [21,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [22,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [23,   0,    1,       0,       0.090,   0.050,      0.000,   0.000,   0,   0,       0],
        [24,   0,    1,       0,       0.420,   0.200,      0.000,   0.000,   0,   0,       0],  # active power large
        [25,   0,    1,       0,       0.420,   0.200,      0.000,   0.000,   0,   0,       0],  # active power large
        [26,   0,    1,       0,       0.060,   0.025,      0.000,   0.000,   0,   0,       0],
        [27,   0,    1,       0,       0.060,   0.025,      0.000,   0.000,   0,   0,       0],
        [28,   0,    1,       0,       0.060,   0.020,      0.000,   0.000,   0,   0,       0],
        [29,   0,    1,       0,       0.120,   0.070,      0.000,   0.000,   0,   0,       0],
        [30,   0,    1,       0,       0.200,   0.600,      0.000,   0.000,   0,   0,       0],  # reactive power large
        [31,   0,    1,       0,       0.150,   0.070,      0.000,   0.000,   0,   0,       0],
        [32,   0,    1,       0,       0.210,   0.100,      0.000,   0.000,   0,   0,       0],
        [33,   0,    1,       0,       0.060,   0.040,      1.000,   0.000,   0,   0,       0]
        ])

#         No  from-bus  to-bus  R  X                 Pmax       Qmax     if-damage   if-operation
    ppc["line"] = np.array([
          [1,   1,   2,   0.000574,   0.000293,       5,           5],
          [2,   2,   3,   0.003070,   0.001564,       5,           5],
          [3,   3,   4,   0.002279,   0.001209,       5,           5],
          [4,   4,   5,   0.002373,   0.001209,       5,           5],
          [5,   5,   6,   0.005100,   0.004402,       5,           5],
          [6,   6,   7,   0.001166,   0.003853,       5,           5],
          [7,   7,   8,   0.004430,   0.001464,       5,           5],
          [8,   8,   9,   0.006413,   0.004608,       5,           5],
          [9,   9,   10,  0.006501,   0.004608,       5,           5],
          [10,  10,  11,  0.001224,   0.000405,       5,           5],
          [11,  11,  12,  0.002331,   0.000771,       5,           5],
          [12,  12,  13,  0.009141,   0.007192,       5,           5],
          [13,  13,  14,  0.003372,   0.004439,       5,           5],
          [14,  14,  15,  0.003680,   0.003275,       5,           5],
          [15,  15,  16,  0.004647,   0.003275,       5,           5],
          [16,  16,  17,  0.008026,   0.010716,       5,           5],
          [17,  17,  18,  0.004558,   0.003574,       5,           5],
          [18,  2,   19,   0.001021,   0.000974,      5,           5],
          [19,  19,  20,  0.009366,   0.008440,       5,           5],
          [20,  20,  21,  0.002550,   0.002979,       5,           5],
          [21,  21,  22,  0.004414,   0.005836,       5,           5],
          [22,  3,   23,   0.002809,   0.001920,      5,           5],
          [23,  23,  24,  0.005592,   0.004415,       5,           5],
          [24,  24,  25,  0.005579,   0.004366,       5,           5],
          [25,  6,   26,   0.001264,   0.000644,      5,           5],
          [26,  26,  27,  0.001770,   0.000901,       5,           5],
          [27,  27,  28,  0.006594,   0.005814,       5,           5],
          [28,  28,  29,  0.005007,   0.004362,       5,           5],
          [29,  29,  30,  0.003160,   0.001610,       5,           5],
          [30,  30,  31,  0.006067,   0.005996,       5,           5],
          [31,  31,  32,  0.001933,   0.002253,       5,           5],
          [32,  32,  33,  0.002123,   0.003301,       5,           5],
          [33,  8,   21,   0.012453,   0.012453,      5,           5],  # tie-line
          [34,  9,   15,  0.012453,   0.012453,       5,           5],  # tie-line
          [35,  12,  22,  0.012453,   0.012453,       5,           5],  # tie-line
          [36,  18,  33,  0.003113,   0.003113,       5,           5],  # tie-line
          [37,  25,  29,  0.003113,   0.003113,       5,           5]   # tie-line
        ])

    ppc['tieline'] = ['line_33', 'line_34', 'line_35', 'line_36', 'line_37']

    #  gen index, gen bus, Pmin, Pmax, Qmin, Qmax
    ppc["gen"] = np.array([
        [1, 1, 0, 100, -100, 100]
    ])

    # call data pre-processing functions
    ppc = get_iterator(ppc)
    ppc = get_bus_line_gen(ppc)
    ppc = get_total_load(ppc)

    return ppc




def case33_tieline_DG():

    # define the network data as a dictionary named ppc
    ppc={}

    ppc["basemva"]=1
# %  0---Load bus, 1---Slack bus,  2---Generator bus
# %        IEEE 33-node feeder
# %        Bus Bus  Voltage Angle   ---Load----        ------Generator-----   Injected
# %        No  code Mag.    Degree   MW       Mvar          MW      Mvar     Qmin Qmax     Mvar
    ppc["bus"] = np.array([
        [1,   1,    1.060,   0.0,     0.016,   0.000,       0.000,   0.000,   0,   0,       0],
        [2,   0,    1.043,   0.0,     0.105,   0.006,       0.000,   0.000,   0,   0,       0],
        [3,   0,    1.000,   0.0,     0.090,   0.040,       0.000,   0.000,   0,   0,       0],
        [4,   0,    1.060,   0.0,     0.120,   0.080,       0.000,   0.000,   0,   0,       0],
        [5,   1,    1.010,   0.0,     0.060,   0.030,       0.000,   0.000,   0,   0,       0],
        [6,   0,    1.0,     0.0,     0.075,   0.020,       0.000,   0.000,   0,   0,       0],
        [7,   0,    1.0,     0.0,     0.240,   0.100,       0.000,   0.000,   0,   0,       0],
        [8,   0,    1.03,    0.0,     0.212,   0.100,       0.000,   0.000,   0,   0,       0],
        [9,   0,    1.0,     0.0,     0.061,   0.020,       0.000,   0.000,   0,   0,       0],
        [10,   1,   1.0,     0.0,     0.072,   0.020,       0.000,   0.000,   0,   0,       0],
        [11,   0,   1.0,     0.0,     0.145,   0.030,       0.000,   0.000,   0,   0,       0],
        [12,   0,   1.0,     0.0,     0.062,   0.035,       0.000,   0.000,   0,   0,       0],
        [13,   0,   1.0,     0.0,     0.063,   0.035,       0.000,   0.000,   0,   0,       0],
        [14,   0,    1,      0,       0.121,   0.080,       0.000,   0.000,   0,   0,       0],
        [15,   1,    1,      0,       0.064,   0.010,       0.000,   0.000,   0,   0,       0],
        [16,   0,    1,      0,       0.065,   0.020,       0.000,   0.000,   0,   0,       0],
        [17,   0,    1,       0,      0.066,   0.020,      0.000,   0.000,   0,   0,       0],
        [18,   0,    1,       0,      0.089,   0.040,      0.000,   0.000,   0,   0,       0],
        [19,   0,    1,       0,      0.092,   0.040,      0.000,   0.000,   0,   0,       0],
        [20,   1,    1,       0,      0.093,   0.040,      0.000,   0.000,   0,   0,       0],
        [21,   0,    1,       0,      0.095,   0.040,      0.000,   0.000,   0,   0,       0],
        [22,   0,    1,       0,      0.096,   0.040,      0.000,   0.000,   0,   0,       0],
        [23,   0,    1,       0,      0.097,   0.050,      0.000,   0.000,   0,   0,       0],
        [24,   0,    1,       0,      0.421,   0.200,      0.000,   0.000,   0,   0,       0],  # active power large
        [25,   1,    1,       0,      0.422,   0.200,      0.000,   0.000,   0,   0,       0],  # active power large
        [26,   0,    1,       0,      0.071,   0.025,      0.000,   0.000,   0,   0,       0],
        [27,   0,    1,       0,      0.067,   0.025,      0.000,   0.000,   0,   0,       0],
        [28,   0,    1,       0,      0.068,   0.020,      0.000,   0.000,   0,   0,       0],
        [29,   0,    1,       0,      0.122,   0.070,      0.000,   0.000,   0,   0,       0],
        [30,   1,    1,       0,      0.201,   0.600,      0.000,   0.000,   0,   0,       0],  # reactive power large
        [31,   0,    1,       0,      0.152,   0.070,      0.000,   0.000,   0,   0,       0],
        [32,   0,    1,       0,      0.213,   0.100,      0.000,   0.000,   0,   0,       0],
        [33,   0,    1,       0,      0.069,   0.040,      1.000,   0.000,   0,   0,       0]
        ])

#         No  from-bus  to-bus  R  X                 Pmax       Qmax     if-damage   if-operation
    ppc["line"] = np.array([
          [1,   1,   2,   0.000574,   0.000293,       5,           5],
          [2,   2,   3,   0.003070,   0.001564,       5,           5],
          [3,   3,   4,   0.002279,   0.001209,       5,           5],
          [4,   4,   5,   0.002373,   0.001209,       5,           5],
          [5,   5,   6,   0.005100,   0.004402,       5,           5],
          [6,   6,   7,   0.001166,   0.003853,       5,           5],
          [7,   7,   8,   0.004430,   0.001464,       5,           5],
          [8,   8,   9,   0.006413,   0.004608,       5,           5],
          [9,   9,   10,  0.006501,   0.004608,       5,           5],
          [10,  10,  11,  0.001224,   0.000405,       5,           5],
          [11,  11,  12,  0.002331,   0.000771,       5,           5],
          [12,  12,  13,  0.009141,   0.007192,       5,           5],
          [13,  13,  14,  0.003372,   0.004439,       5,           5],
          [14,  14,  15,  0.003680,   0.003275,       5,           5],
          [15,  15,  16,  0.004647,   0.003275,       5,           5],
          [16,  16,  17,  0.008026,   0.010716,       5,           5],
          [17,  17,  18,  0.004558,   0.003574,       5,           5],
          [18,  2,   19,   0.001021,   0.000974,      5,           5],
          [19,  19,  20,  0.009366,   0.008440,       5,           5],
          [20,  20,  21,  0.002550,   0.002979,       5,           5],
          [21,  21,  22,  0.004414,   0.005836,       5,           5],
          [22,  3,   23,   0.002809,   0.001920,      5,           5],
          [23,  23,  24,  0.005592,   0.004415,       5,           5],
          [24,  24,  25,  0.005579,   0.004366,       5,           5],
          [25,  6,   26,   0.001264,   0.000644,      5,           5],
          [26,  26,  27,  0.001770,   0.000901,       5,           5],
          [27,  27,  28,  0.006594,   0.005814,       5,           5],
          [28,  28,  29,  0.005007,   0.004362,       5,           5],
          [29,  29,  30,  0.003160,   0.001610,       5,           5],
          [30,  30,  31,  0.006067,   0.005996,       5,           5],
          [31,  31,  32,  0.001933,   0.002253,       5,           5],
          [32,  32,  33,  0.002123,   0.003301,       5,           5],
          [33,  8,   21,   0.012453,   0.012453,      5,           5],  # tie-line
          [34,  9,   15,  0.012453,   0.012453,       5,           5],  # tie-line
          [35,  12,  22,  0.012453,   0.012453,       5,           5],  # tie-line
          [36,  18,  33,  0.003113,   0.003113,       5,           5],  # tie-line
          [37,  25,  29,  0.003113,   0.003113,       5,           5]   # tie-line
        ])

    ppc['tieline'] = ['line_33', 'line_34', 'line_35', 'line_36', 'line_37']

    #  gen index, gen bus, Pmin, Pmax, Qmin, Qmax
    ppc["gen"] = np.array([
        [1, 1, 0, 100, -100, 100],
        [2, 5, 0, 0, -0.2, 0.2],
        [3, 10, 0, 0, -0.2, 0.2],
        [4, 15, 0, 0, -0.2, 0.2],
        [5, 20, 0, 0, -0.2, 0.2],
        [6, 25, 0, 0, -0.2, 0.2],
        [7, 30, 0, 0, -0.2, 0.2]
    ])

    ppc['varcon'] = ['gen_2', 'gen_3', 'gen_4', 'gen_5', 'gen_6', 'gen_7']

    # call data pre-processing functions
    ppc = get_iterator(ppc)
    ppc = get_bus_line_gen(ppc)
    ppc = get_total_load(ppc)

    return ppc





# =================== Data pre-processing functions ==================

def get_bus_line_gen(ppc):

    # =================== Tips ====================
    # Here we need to get the integer index from the string like 'bus_13'
    # Assume a = 'bus_13', then int(a[a.find('_')+1:]) = 13
    #=========================================================

    # define a bus line relation dictionary, which the input is bus index and output is branch index
    bus_line = {}
    for i in ppc['iter_bus']:
        # get the matrix index from the component name
        id = int(i[i.find('_') + 1:]) - 1

        bus_line[i] = {}
        bus_line[i]["line_from_this_bus"] = np.where(True == (ppc['bus'][id, 0] == ppc['line'][:, 1]))[
                                                0] + 1  # from bus at index column 1
        bus_line[i]["line_to_this_bus"] = np.where(True == (ppc['bus'][id, 0] == ppc['line'][:, 2]))[
                                              0] + 1  # from bus at index column 2

    # define a bus generator relation dictionary, which the input is bus index and output is generator index
    bus_gen = {}
    for i in ppc['iter_bus']:
        # get the matrix index from the component name
        id = int(i[i.find('_') + 1:]) - 1

        bus_gen[i] = {}
        bus_gen[i] = np.where(True == (ppc['bus'][id, 0] == ppc['gen'][:, 1]))[0] + 1

    ppc['bus_line'] = bus_line
    ppc['bus_gen'] = bus_gen

    return ppc



def get_iterator(ppc):

    # # get size of bus, line and generator
    ppc['number_bus'] = ppc['bus'].shape[0]  # shape returns (row,column)
    ppc['number_line'] = ppc['line'].shape[0]
    ppc['number_gen'] = ppc['gen'].shape[0]

    # # create index for bus, generator and horizon
    ppc['index_bus'] = np.arange(0, ppc['number_bus'])
    ppc['index_line'] = np.arange(0, ppc['number_line'])
    ppc['index_gen'] = np.arange(0, ppc['number_gen'])

    # create name as iterator
    iter_bus = []
    for i in ppc['index_bus']:
        iter_bus.append('bus_{}'.format(int(ppc['bus'][i, 0])))

    iter_line = []
    for i in ppc['index_line']:
        iter_line.append('line_{}'.format(int(ppc['line'][i, 0])))

    iter_gen = []
    for i in ppc['index_gen']:
        iter_gen.append('gen_{}'.format(int(ppc['gen'][i, 0])))

    ppc['iter_bus'] = iter_bus
    ppc['iter_line'] = iter_line
    ppc['iter_gen'] = iter_gen

    return ppc


def get_total_load(ppc):

    ppc['total_P'] = sum(ppc['bus'][i, 4] for i in ppc['index_bus'])
    ppc['total_Q'] = sum(ppc['bus'][i, 5] for i in ppc['index_bus'])

    return ppc